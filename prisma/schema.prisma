generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum SubscriptionTier {
  free
  starter
  pro
  studio
}

enum ProcessingStatus {
  pending
  analyzing_chat
  generating_clips
  processing_video
  completed
  failed
}

enum JobType {
  chat_analysis
  clip_generation
  format_conversion
}

enum JobStatus {
  pending
  running
  completed
  failed
  cancelled
}

enum ProcessingJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ClipStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

enum UserRole {
  user
  admin
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAUSED
  EXPIRED
  INACTIVE
}

model User {
  id               String           @id @default(cuid())
  clerkId          String           @unique
  twitchId         String?          @unique
  twitchUsername   String?
  email            String
  role             UserRole         @default(user)
  subscriptionTier SubscriptionTier @default(free)
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  lemonSqueezySubscriptionId String?
  lemonSqueezyCustomerId String?
  subscriptionCurrentPeriodEnd DateTime?
  creditsRemaining Int              @default(0)
  processingQuota  Int              @default(20)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  vods           VOD[]
  clips          Clip[]
  processingJobs ProcessingJob[]
  analytics      UserAnalytics[]
  preferences    UserPreferences?
}

model VOD {
  id               String           @id @default(cuid())
  userId           String
  twitchVodId      String           @unique
  title            String
  duration         Int
  viewCount        Int?
  gameCategory     String?
  createdDate      DateTime
  chatAnalysis     Json?
  status           String           @default("PENDING")
  processingStatus ProcessingStatus @default(pending)
  processingProgress Int            @default(0)
  thumbnailUrl     String?
  vodUrl           String?
  qualityLevels    String[]
  fileSizeMb       Int?
  analyzedAt       DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  clips          Clip[]
  processingJobs ProcessingJob[]

  @@index([userId, createdAt(sort: Desc)])
}

model Clip {
  id               String     @id @default(cuid())
  vodId            String
  userId           String
  title            String
  startTime        Int
  endTime          Int
  duration         Int
  status           ClipStatus @default(PENDING)
  confidenceScore  Float
  highlightReason  String?
  keywords         String[]
  videoUrl         String?
  clipUrl          String?
  thumbnailUrl     String?
  socialFormats    Json?
  downloadCount    Int        @default(0)
  shareCount       Int        @default(0)
  engagementData   Json?
  metadata         Json?
  processedAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  vod  VOD  @relation(fields: [vodId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([vodId])
  @@index([confidenceScore(sort: Desc)])
  @@index([status])
}

model ProcessingJob {
  id               String    @id @default(cuid())
  userId           String
  vodId            String?
  type             String
  status           ProcessingJobStatus @default(PENDING)
  progress         Int       @default(0)
  parameters       Json?
  result           Json?
  priority         Int       @default(0)
  attempts         Int       @default(0)
  workerId         String?
  startedAt        DateTime?
  completedAt      DateTime?
  error            String?
  retryCount       Int       @default(0)
  processingTimeMs Int?
  memoryUsedMb     Int?
  costCents        Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  vod  VOD? @relation(fields: [vodId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([priority, createdAt])
}

model UserAnalytics {
  id                    String   @id @default(cuid())
  userId                String
  date                  DateTime @db.Date
  clipsGenerated        Int      @default(0)
  processingTimeSeconds Int      @default(0)
  storageUsedMb         Int      @default(0)
  avgConfidenceScore    Float?
  topHighlightReasons   String[]
  popularKeywords       String[]
  lastActiveAt          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date(sort: Desc)])
}

model UserPreferences {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  emailNotifications       Boolean  @default(true)
  emailProcessingComplete  Boolean  @default(true)
  emailProcessingFailed    Boolean  @default(true)
  emailSubscriptionUpdates Boolean  @default(true)
  emailProductUpdates      Boolean  @default(false)
  emailWeeklyDigest        Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}